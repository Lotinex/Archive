{"version":3,"sources":["serviceWorker.ts","Tools/Utils.ts","Tools/Framework.tsx","Tools/TitleProject.tsx","Tools/Transition.tsx","Tools/Language.tsx","Pages/Main/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Util","start","end","Math","floor","random","Framework","Union","union","this","UnionReferTable","hasOwnProperty","push","unionName","args","forEach","receiver","React","PureComponent","ProjectEntity","baseX","baseY","baseRadius","baseColor","id","x","y","radius","color","descriptionValue","renderCtx","beginPath","fillStyle","arc","PI","fill","closePath","value","document","addEventListener","e","pageX","pageY","registeredConditions","position","rendered","current","action","atLeastOne","parentRadius","parentChildNumber","ProjectStar","title","nowChildNumber","child","ProjectPlanet","name","parentStar","changer","type","getRevolutionRadius","speed","calculateRevolution","star","Object","assign","ProjectRenderer","autobind","canvasRef","createRef","ctx","state","shouldUpdate","entities","props","canvasWidth","width","canvasHeight","height","clearRect","renderEntities","requestAnimationFrame","update","entity","render","getContext","setState","ref","innerWidth","innerHeight","className","ProjectDescriptor","renderingText","visible","scrollY","style","left","top","stage","getElementById","L","expression","parseInt","replace","targetString","rgbString","RGBValues","remove","split","r","g","b","text","console","log","Teststar","currentColor","parseRGB","description","planetList","i","planet","map","revolution","pathObject","ProjectView","Title","Main","ReactDOM","basename","process","keys","path","replaceExact","component","exact","startsWith","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0f6de484.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default class Util {\r\n    public static random(start: number, end: number): number {\r\n        return Math.floor((Math.random() * (end-start + 1)) + start);\r\n    }\r\n}","import React from 'react'\r\n\r\n\r\ntype ArgsOf<T> = T extends (...args: infer A) => any ? A : never;\r\ntype UNION_REFER_TABLE = {\r\n    [key in keyof Refer.Global.UNION] : Array<Refer.Global.UNION[key]>;\r\n}\r\nexport default abstract class Framework<P= {}, S ={}> extends React.PureComponent<P, S> {\r\n    abstract render():React.ReactNode;\r\n\r\n\r\n    public Union: Partial<Refer.Global.UNION> = {};\r\n\r\n    public static UnionReferTable: Partial<UNION_REFER_TABLE> = {};\r\n    public static action<T extends keyof Refer.Global.UNION, A extends ArgsOf<Refer.Global.UNION[T]>>(unionName: T, ...args: A): void {\r\n        (Framework.UnionReferTable[unionName] as any).forEach((receiver: (...args: A) => void) => {\r\n            receiver(...args);\r\n        })\r\n    }\r\n    componentDidMount(): void {\r\n        let union: keyof Refer.Global.UNION;\r\n\r\n        for(union in this.Union){\r\n            if(!Framework.UnionReferTable.hasOwnProperty(union)){\r\n                (Framework.UnionReferTable[union] as any) = [ this.Union[union] ];\r\n            } else {\r\n               (Framework.UnionReferTable[union] as any).push(this.Union[union]);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Util from './Utils'\r\nimport Framework from './Framework'\r\nimport autobind from 'autobind-decorator'\r\nimport L from './Language'\r\nimport React from 'react'\r\n\r\nexport const REVOLUTION_SPEED = 0.03;\r\nexport class ProjectEntity {\r\n\r\n    public x: number;\r\n    public y : number;\r\n    public radius: number;\r\n    public color: string;\r\n    public descriptionValue: string; //FIXME: test\r\n    public id: string;\r\n\r\n    constructor(baseX: number, baseY: number, baseRadius: number, baseColor: string, id: string){\r\n        this.x = baseX;\r\n        this.y = baseY;\r\n        this.radius = baseRadius;\r\n        this.color = baseColor;\r\n        this.descriptionValue = '';\r\n        this.id = id;\r\n    }\r\n    public render(renderCtx: CanvasRenderingContext2D): void {\r\n        renderCtx.beginPath()\r\n        renderCtx.fillStyle = this.color;\r\n        renderCtx.arc(this.x, this.y, this.radius, 0, Math.PI * 2)\r\n        renderCtx.fill()\r\n        renderCtx.closePath()\r\n    }\r\n    public static registeredConditions : {\r\n        [id: string] : {\r\n            position: boolean;\r\n            rendered: boolean;\r\n            value: string;\r\n        }\r\n    } = {};\r\n\r\n    // 일단 제목 여부같은것과 상관없이 단일 문자열로 된 설명창을 띄운다.\r\n    public description(value: string): void {\r\n        this.descriptionValue = value;\r\n        let descriptionRendered = false;\r\n        document.addEventListener('mousemove', e => {\r\n\r\n            let x = e.pageX\r\n            let y = e.pageY\r\n\r\n            ProjectEntity.registeredConditions[this.id] = {\r\n                position : x >= (this.x - this.radius) && x <= (this.x + this.radius) && y >= (this.y - this.radius) && y <= (this.y + this.radius),\r\n                /**\r\n                 * @deprecated\r\n                 */\r\n                rendered : false,\r\n                value : this.descriptionValue\r\n            }\r\n\r\n\r\n            for(let id in ProjectEntity.registeredConditions){\r\n                const current = ProjectEntity.registeredConditions[id];\r\n\r\n                if(current.position){\r\n                    Framework.action('renderDescription', current.value, {x, y});\r\n                    ProjectEntity.registeredConditions[id].rendered = true;\r\n                }\r\n            }\r\n            let atLeastOne = false;\r\n            for(let id in ProjectEntity.registeredConditions){\r\n                if(ProjectEntity.registeredConditions[id].position){\r\n                    atLeastOne = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!atLeastOne){\r\n               Framework.action('hideDescriptor');\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    public static getRevolutionRadius(parentRadius: number, parentChildNumber: number): number {\r\n        return parentRadius + (50 * (parentChildNumber === 0 ? 1 : parentChildNumber))\r\n    }\r\n\r\n}\r\nexport class ProjectStar extends ProjectEntity {\r\n\r\n    private title: string;\r\n    private nowChildNumber: number;\r\n    constructor(title: string, baseX: number, baseY: number, baseRadius: number, baseColor: string, id: string){\r\n        super(baseX, baseY, baseRadius, baseColor, id);\r\n        this.title = title;\r\n        this.nowChildNumber = 0;\r\n    }\r\n    //생성 후 작성\r\n    public update(){}\r\n\r\n    public map(child: ProjectPlanet): void {\r\n        this.nowChildNumber++;\r\n        //아직 child를 가지고 뭔가를 하지는 않는다.\r\n\r\n    }\r\n\r\n}\r\nexport class ProjectPlanet extends ProjectEntity {\r\n    \r\n    private name: string;\r\n    private parentStar: Partial<{\r\n        x : number;\r\n        y : number;\r\n        radius: number;\r\n        nowChildNumber: number;\r\n    }> = {};\r\n    private changer: number;\r\n\r\n    constructor(name: string, baseX: number, baseY: number, baseRadius: number, baseColor: string, id: string){\r\n        super(baseX, baseY, baseRadius, baseColor, id);\r\n        this.name = name;\r\n        this.changer = Util.random(0, 30);\r\n    }\r\n\r\n    //생성 후 작성\r\n    public update(){}\r\n    private calculateRevolution(type : \"x\" | \"y\"): number {\r\n        const method = type === \"x\" ? \"sin\" : \"cos\"\r\n        return Math[method](this.changer) * \r\n        ProjectEntity.getRevolutionRadius(this.parentStar.radius as number, this.parentStar.nowChildNumber as number)\r\n        + (this.parentStar[type] as number);\r\n\r\n    }\r\n    public revolution(speed: number): void {\r\n        this.changer += speed;\r\n\r\n        this.x = this.calculateRevolution(\"x\");\r\n        this.y = this.calculateRevolution(\"y\");\r\n\r\n    }\r\n    public map(star: ProjectStar): void {\r\n        Object.assign(this.parentStar, star)\r\n    }\r\n\r\n}\r\n@autobind \r\nexport class ProjectRenderer extends Framework<Refer.Props.ProjectRenderer, Refer.State.ProjectRenderer> {\r\n\r\n    private readonly canvasRef = React.createRef<HTMLCanvasElement>();\r\n    private ctx: CanvasRenderingContext2D | null = null;\r\n\r\n    state: Refer.State.ProjectRenderer = {\r\n        shouldUpdate : true,\r\n        entities : this.props.entities,\r\n    }\r\n    update(): void {\r\n        if(this.state.shouldUpdate) {\r\n            const canvasWidth = this.canvasRef.current?.width as number;\r\n            const canvasHeight = this.canvasRef.current?.height as number;\r\n\r\n            (this.ctx as CanvasRenderingContext2D).clearRect(0, 0, canvasWidth, canvasHeight)\r\n\r\n            this.renderEntities()\r\n            window.requestAnimationFrame(this.update)\r\n        }\r\n    }\r\n    renderEntities(): void {\r\n        for(const entity of this.state.entities){\r\n            entity.render(this.ctx as CanvasRenderingContext2D);\r\n            entity.update();\r\n        }\r\n    }\r\n    componentDidMount(): void {\r\n        this.ctx = this.canvasRef.current?.getContext(\"2d\") as CanvasRenderingContext2D;\r\n        window.requestAnimationFrame(this.update)\r\n    }\r\n    componentWillUnmount(): void {\r\n        this.setState({ shouldUpdate : false })\r\n    }\r\n    render(): React.ReactNode {\r\n        return (\r\n            <canvas ref={this.canvasRef} width={window.innerWidth} height={window.innerHeight} className=\"projectViewer\"/>\r\n        )\r\n    }\r\n}\r\n@autobind\r\nexport class ProjectDescriptor extends Framework<Refer.Props.ProjectDescriptor, Refer.State.ProjectDescriptor> {\r\n\r\n    state: Refer.State.ProjectDescriptor = {\r\n        renderingText : '',\r\n        visible : false,\r\n        position : {x: 0, y: 0},\r\n        scrollY : 0,\r\n    }\r\n    Union: Partial<Refer.Global.UNION> = {\r\n        'renderDescription' : (value, position) => {\r\n            this.setState({ visible : true });\r\n            this.setState({ position });\r\n            this.setState({ renderingText : value });\r\n        },\r\n        'hideDescriptor' : () => {\r\n            this.setState({ visible : false });\r\n        }\r\n    }\r\n    render(): React.ReactNode {\r\n        return (\r\n            <>\r\n                {this.state.visible ?\r\n                    <div className=\"project-descriptor\" style={{left: `${this.state.position.x + 10}px`, top: `${this.state.position.y + 10 - window.scrollY}px`}}>\r\n                        {this.state.renderingText}\r\n                    </div>\r\n                    : null\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { ComponentClass } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport Framework from './Framework'\r\nimport '../base.css'\r\n\r\nimport { ProjectDescriptor } from './TitleProject'\r\n\r\nconst stage = document.getElementById('stage')\r\n\r\n\r\ntype PathExpression = {\r\n    [path: string] : typeof Framework //??\r\n}\r\nexport function PathResolver(pathObject: PathExpression):void {\r\n    ReactDOM.render(\r\n        <>\r\n        <div id=\"subStage\">\r\n            <ProjectDescriptor />\r\n        </div>\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            {\r\n                Object.keys(pathObject).map(path => {\r\n                    let replaceExact = path.replace('!','')\r\n                    return <Route path={`/${replaceExact === 'index' ? '' : replaceExact}`} component={pathObject[path] as any} exact={path.startsWith('!')} />\r\n                })\r\n            }\r\n        </BrowserRouter>\r\n        </>,\r\n        stage\r\n    )\r\n}\r\nexport function Transition(path: string):void {\r\n    window.location.href = `/${path}`\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export default class L {\r\n    public static numberFromPx(expression: string): number {\r\n        return parseInt(expression.replace('px', ''));\r\n    }\r\n    public static remove(targetString: string, value: any){\r\n        return targetString.replace(value, '');\r\n    }\r\n    public static parseRGB(rgbString: string){\r\n        let RGBValues = L.remove(L.remove(rgbString, 'rgb('), ')').split(',');\r\n        \r\n        return {\r\n            r : parseInt(RGBValues[0]),\r\n            g : parseInt(RGBValues[1]),\r\n            b : parseInt(RGBValues[2])\r\n        }\r\n    }\r\n    public static debug(text: any){\r\n        console.log(\"%cDEBUG\" + \"%c | \" + `%c${text}`, 'background:black; color:white;', 'font-weight:bold;', 'color: red;')\r\n    }\r\n}","import Framework from '../../Tools/Framework'\r\nimport autobind from 'autobind-decorator'\r\nimport React from 'react'\r\nimport './index.css'\r\nimport L from '../../Tools/Language'\r\nimport { ProjectPlanet, ProjectStar, ProjectRenderer, ProjectDescriptor } from '../../Tools/TitleProject'\r\nimport Util from '../../Tools/Utils'\r\n\r\nconst Teststar = [new ProjectStar('web', 700, 300, 50, `rgb(255,255,255)`, `id-${Util.random(1,1000)}`), new ProjectStar('web', 1000, 400, 50, `rgb(255,255,255)`,`id-${Util.random(1,1000)}`)]\r\nTeststar[0].update = function(){\r\n    const currentColor = L.parseRGB(this.color);\r\n    if(currentColor.b <= 0){\r\n        this.color = `rgb(255,255,255)`\r\n    }\r\n    else this.color = `rgb(${currentColor.r - 0.7},${currentColor.g - 1.4},${currentColor.b - 3.5})`\r\n}\r\nTeststar[0].description('tesssssst')\r\nTeststar[1].update = function(){\r\n    const currentColor = L.parseRGB(this.color);\r\n    if(currentColor.b <= 0){\r\n        this.color = `rgb(255,255,255)`\r\n    }\r\n    else this.color = `rgb(${currentColor.r - 0.7},${currentColor.g - 1.4},${currentColor.b - 3.5})`\r\n}\r\nTeststar[1].description(\"asda\")\r\nlet planetList: ProjectPlanet[] = [];\r\nfor(let i=1; i<4; i++){\r\n    const planet = new ProjectPlanet('test', 1, 1, 20, `rgb(${Util.random(0, 255)}, ${Util.random(0, 255)}, ${Util.random(0, 255)})`,`id-${Util.random(1,1000)}`);\r\n\r\n    Teststar[0].map(planet)\r\n    planet.map(Teststar[0])\r\n    planet.update = function(){\r\n        this.revolution(0.0007 * i);\r\n    }\r\n    planetList.push(planet)\r\n}\r\nfor(let i=1; i<4; i++){\r\n    const planet = new ProjectPlanet('test', 1, 1, 20, `rgb(${Util.random(0, 255)}, ${Util.random(0, 255)}, ${Util.random(0, 255)})`,`id-${Util.random(1,1000)}`);\r\n\r\n    Teststar[1].map(planet)\r\n    planet.map(Teststar[1])\r\n    planet.update = function(){\r\n        this.revolution(0.0007 * i);\r\n    }\r\n    planetList.push(planet)\r\n}\r\n\r\n\r\n\r\n@autobind\r\nclass ProjectView extends Framework {\r\n    render(): React.ReactNode {\r\n        return (\r\n            <>\r\n                <ProjectRenderer  entities={[\r\n                    ...Teststar,\r\n                    ...planetList\r\n                ]}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n@autobind\r\nclass Title extends Framework {\r\n    render():React.ReactNode {\r\n        return (\r\n            <>\r\n                <div className=\"title-box\">\r\n                    <div className=\"title-cover\">\r\n                        <div className=\"title-info\">\r\n                            <div className=\"title-lotinex\">이름</div>\r\n                            <div className=\"title-lotinex-info\">설명1</div>\r\n                        </div>\r\n                    </div>\r\n                    <ProjectView />\r\n                    <div className=\"milestone-down\">\r\n                        <i className=\"fas fa-angle-down\"></i>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n@autobind\r\nexport default class Main extends Framework {\r\n    render(): React.ReactNode {\r\n        return (\r\n            <>\r\n                <Title />\r\n                <div className=\"bottom\"></div>\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport {Transition, PathResolver} from './Tools/Transition'\nimport Framework from './Tools/Framework'\n\nimport Main from './Pages/Main'\n\nconst path = {\n  'index' : Main\n}\n\nPathResolver(path);\n\nserviceWorker.unregister();"],"sourceRoot":""}